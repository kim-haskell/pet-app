{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\shelb\\\\desktop\\\\Code\\\\pet-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\Users\\\\shelb\\\\desktop\\\\Code\\\\pet-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\Users\\\\shelb\\\\desktop\\\\Code\\\\pet-app\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shelb\\\\desktop\\\\Code\\\\pet-app\\\\client\\\\src\\\\pages\\\\Animal.js\";\nimport React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Animal() {\n  var _this = this;\n\n  // Setting our component's initial state\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      animal = _useState2[0],\n      setAnimal = _useState2[1];\n\n  var _useState3 = useState({}),\n      _useState4 = _slicedToArray(_useState3, 2),\n      formObject = _useState4[0],\n      setFormObject = _useState4[1]; // Load all animals and store them with setAnimals\n\n\n  useEffect(function () {\n    loadAnimal();\n  }, []); // Loads all animals and sets them to animals\n\n  function loadAnimal() {\n    API.getAnimal().then(function (res) {\n      return setAnimal(res.data);\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  }\n\n  ; // Deletes a animal from the database with a given id, then reloads animals from the db\n\n  function deleteAnimal(id) {\n    API.deleteAnimal(id).then(function (res) {\n      return loadAnimal();\n    }).catch(function (err) {\n      return console.log(err);\n    });\n  } // Handles updating component state when the user types into the input field\n\n\n  function handleInputChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setFormObject(_objectSpread({}, formObject, _defineProperty({}, name, value)));\n  }\n\n  ; // When the form is submitted, use the API.saveAnimal method to save the animal data\n  // Then reload animals from the database\n\n  function handleFormSubmit(event) {\n    event.preventDefault();\n\n    if (formObject.name && formObject.type && formObject.DOB && formObject.notes) {\n      API.saveAnimal({\n        name: formObject.name,\n        type: formObject.type,\n        DOB: formObject.DOB,\n        notes: formObject.notes\n      }).then(function (res) {\n        return loadAnimal();\n      }).catch(function (err) {\n        return console.log(err);\n      });\n    }\n  }\n\n  ;\n  return /*#__PURE__*/React.createElement(Container, {\n    fluid: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 15\n    }\n  }, \"Please Enter your Pets Information\")), /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"name\",\n    placeholder: \"Name (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"type\",\n    placeholder: \"Type (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    onChange: handleInputChange,\n    name: \"DOB\",\n    placeholder: \"DOB (required)\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(TextArea, {\n    onChange: handleInputChange,\n    name: \"notes\",\n    placeholder: \"Notes regarding your pet:\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(FormBtn, {\n    disabled: !(formObject.name && formObject.type && formObject.DOB && formObject.notes),\n    onClick: function onClick() {\n      return handleFormSubmit;\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, \"Submit Information\"))), /*#__PURE__*/React.createElement(Col, {\n    size: \"md-6 sm-12\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Jumbotron, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 15\n    }\n  }, \"List of Saved Pets\")), animal.length ? /*#__PURE__*/React.createElement(List, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 15\n    }\n  }, animal.map(function (animal) {\n    return /*#__PURE__*/React.createElement(ListItem, {\n      key: animal._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/animal/\" + animal._id,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 21\n      }\n    }), /*#__PURE__*/React.createElement(DeleteBtn, {\n      onClick: function onClick() {\n        return deleteAnimal(animal._id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }\n    }));\n  })) : /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 15\n    }\n  }, \"No Results to Display\"))));\n}\n\nexport default Animal;","map":{"version":3,"sources":["C:/Users/shelb/desktop/Code/pet-app/client/src/pages/Animal.js"],"names":["React","useState","useEffect","DeleteBtn","Jumbotron","API","Link","Col","Row","Container","List","ListItem","Input","TextArea","FormBtn","Animal","animal","setAnimal","formObject","setFormObject","loadAnimal","getAnimal","then","res","data","catch","err","console","log","deleteAnimal","id","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","type","DOB","notes","saveAnimal","length","map","_id"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport DeleteBtn from \"../components/DeleteBtn\";\nimport Jumbotron from \"../components/Jumbotron\";\nimport API from \"../utils/API\";\nimport { Link } from \"react-router-dom\";\nimport { Col, Row, Container } from \"../components/Grid\";\nimport { List, ListItem } from \"../components/List\";\nimport { Input, TextArea, FormBtn } from \"../components/Form\";\n\nfunction Animal() {\n  // Setting our component's initial state\n  const [animal, setAnimal] = useState([])\n  const [formObject, setFormObject] = useState({})\n\n  // Load all animals and store them with setAnimals\n  useEffect(() => {\n    loadAnimal()\n  }, [])\n\n  // Loads all animals and sets them to animals\n  function loadAnimal() {\n    API.getAnimal()\n      .then(res => \n        setAnimal(res.data)\n      )\n      .catch(err => console.log(err));\n  };\n\n  // Deletes a animal from the database with a given id, then reloads animals from the db\n  function deleteAnimal(id) {\n    API.deleteAnimal(id)\n      .then(res => loadAnimal())\n      .catch(err => console.log(err));\n  }\n\n  // Handles updating component state when the user types into the input field\n  function handleInputChange(event) {\n    const { name, value } = event.target;\n    setFormObject({...formObject, [name]: value})\n  };\n\n  // When the form is submitted, use the API.saveAnimal method to save the animal data\n  // Then reload animals from the database\n  function handleFormSubmit(event) {\n    event.preventDefault();\n    if (formObject.name && formObject.type && formObject.DOB && formObject.notes) {\n      API.saveAnimal({\n        name: formObject.name,\n        type: formObject.type,\n        DOB: formObject.DOB,\n        notes: formObject.notes\n      })\n        .then(res => loadAnimal())\n        .catch(err => console.log(err));\n    }\n  };\n\n    return (\n      <Container fluid>\n        <Row>\n          <Col size=\"md-6\">\n            <Jumbotron>\n              <h1>Please Enter your Pets Information</h1>\n            </Jumbotron>\n            <form>\n              <Input\n                onChange={handleInputChange}\n                name=\"name\"\n                placeholder=\"Name (required)\"\n              />\n              <Input\n                onChange={handleInputChange}\n                name=\"type\"\n                placeholder=\"Type (required)\"\n              />\n              <Input\n                onChange={handleInputChange}\n                name=\"DOB\"\n                placeholder=\"DOB (required)\"\n              />\n              <TextArea\n                onChange={handleInputChange}\n                name=\"notes\"\n                placeholder=\"Notes regarding your pet:\"\n              />\n              <FormBtn\n                disabled={!(formObject.name && formObject.type && formObject.DOB && formObject.notes)}\n                onClick= {() => handleFormSubmit}\n              >\n                Submit Information\n              </FormBtn>\n            </form>\n          </Col>\n          <Col size=\"md-6 sm-12\">\n            <Jumbotron>\n              <h1>List of Saved Pets</h1>\n            </Jumbotron>\n            {animal.length ? (\n              <List>\n                {animal.map(animal => (\n                  <ListItem key={animal._id}>\n                    <Link to={\"/animal/\" + animal._id}>\n                      {/* <strong>\n                        {animal.name} is a {animal.type}, their DOB is {animal.DOB}. These are the notes: {animal.notes}.\n                      </strong> */}\n                    </Link>\n                    <DeleteBtn onClick={() => deleteAnimal(animal._id)} />\n                  </ListItem>\n                ))}\n              </List>\n            ) : (\n              <h3>No Results to Display</h3>\n            )}\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n\n\nexport default Animal;\n"]},"metadata":{},"sourceType":"module"}